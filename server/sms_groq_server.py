#!/usr/bin/env python3
import http.server
import socketserver
from urllib.parse import urlparse, parse_qs
import json
from datetime import datetime
import os
from groq import Groq

# Groq API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
GROQ_API_KEY = os.getenv('GROQ_API_KEY', 'your-groq-api-key-here')
groq_client = Groq(api_key=GROQ_API_KEY)

# –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
messages = []

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö AI –æ—Ç–≤–µ—Ç–æ–≤
ai_responses = []

def process_with_groq(text, phone):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ Groq AI"""
    try:
        print(f"ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Groq AI: {text}")
        
        chat_completion = groq_client.chat.completions.create(
            messages=[
                {
                    "role": "system",
                    "content": "–¢—ã —É–º–Ω—ã–π SMS –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ú–∞–∫—Å–∏–º—É–º 160 —Å–∏–º–≤–æ–ª–æ–≤."
                },
                {
                    "role": "user",
                    "content": text
                }
            ],
            model="llama3-8b-8192",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—ã–π Llama –º–æ–¥–µ–ª—å
            max_tokens=100,
            temperature=0.7
        )
        
        ai_response = chat_completion.choices[0].message.content.strip()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º AI –æ—Ç–≤–µ—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        ai_data = {
            'original_text': text,
            'ai_response': ai_response,
            'phone': phone,
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'model': 'llama3-8b-8192'
        }
        ai_responses.append(ai_data)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é AI –æ—Ç–≤–µ—Ç–æ–≤ 50 –∑–∞–ø–∏—Å—è–º–∏
        if len(ai_responses) > 50:
            ai_responses[:] = ai_responses[-50:]
        
        print(f"ü§ñ –û—Ç–≤–µ—Ç AI: {ai_response}")
        return ai_response
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Groq AI: {e}")
        return f"–ò–∑–≤–∏–Ω–∏—Ç–µ, AI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ '{text}' –ø–æ–ª—É—á–µ–Ω–æ."

class MyHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        parsed_path = urlparse(self.path)
        
        if parsed_path.path == '/webhook' or parsed_path.path == '/webhook/webhook':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook
            query_params = parse_qs(parsed_path.query)
            phone = query_params.get('phone', [''])[0]
            mes = query_params.get('mes', [''])[0]
            
            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            
            print(f"üì± –ó–∞–ø—Ä–æ—Å –æ—Ç: {self.client_address[0]}")
            print(f"üì© [{timestamp}] –¢–µ–ª–µ—Ñ–æ–Ω: {phone}, –°–æ–æ–±—â–µ–Ω–∏–µ: {mes}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            global messages
            incoming_msg = {
                'phone': phone,
                'text': mes,
                'timestamp': timestamp,
                'type': 'incoming',
                'ip': self.client_address[0]
            }
            messages.append(incoming_msg)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Groq AI
            ai_reply = process_with_groq(mes, phone)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (AI –æ—Ç–≤–µ—Ç)
            outgoing_msg = {
                'phone': phone,
                'text': ai_reply,
                'timestamp': timestamp,
                'type': 'outgoing',
                'ip': self.client_address[0],
                'ai_processed': True
            }
            messages.append(outgoing_msg)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 100 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            if len(messages) > 100:
                messages[:] = messages[-100:]
            
            response = {
                'status': 'ok',
                'reply': ai_reply,
                'timestamp': timestamp,
                'ai_processed': True
            }
            
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))
            
        elif parsed_path.path == '/ai-history':
            # API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ AI –æ—Ç–≤–µ—Ç–æ–≤
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            self.wfile.write(json.dumps(ai_responses, ensure_ascii=False).encode('utf-8'))
            
        elif parsed_path.path == '/test':
            # –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            self.send_response(200)
            self.send_header('Content-Type', 'text/html; charset=utf-8')
            self.end_headers()
            html = """
            <html>
            <head><title>SMS Gateway AI Test</title></head>
            <body>
                <h1>ü§ñ SMS Gateway AI Test</h1>
                <p>–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —Ç–æ —Å–µ—Ç—å –≤ –ø–æ—Ä—è–¥–∫–µ.</p>
                <button onclick="test()">–¢–µ—Å—Ç AI webhook</button>
                <div id="result"></div>
                <script>
                function test() {
                    fetch('/webhook?phone=test&mes=–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?')
                    .then(r => r.json())
                    .then(data => {
                        document.getElementById('result').innerHTML = 
                            '<h3>–†–µ–∑—É–ª—å—Ç–∞—Ç:</h3><pre>' + JSON.stringify(data, null, 2) + '</pre>';
                    });
                }
                </script>
            </body>
            </html>
            """.encode()
            self.wfile.write(html)
        else:
            # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
            self.send_response(200)
            self.send_header('Content-Type', 'text/html; charset=utf-8')
            self.end_headers()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π
            messages_html = ''
            if messages:
                for msg in messages[-15:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 15 —Å–æ–æ–±—â–µ–Ω–∏–π
                    msg_class = 'incoming' if msg['type'] == 'incoming' else 'outgoing'
                    icon = 'üì©' if msg['type'] == 'incoming' else 'ü§ñ' if msg.get('ai_processed') else 'üì§'
                    ai_badge = ' <span style="background: #28a745; color: white; padding: 2px 6px; border-radius: 3px; font-size: 10px;">AI</span>' if msg.get('ai_processed') else ''
                    messages_html += f'''
                    <div class="message {msg_class}">
                        <div class="msg-header">{icon} {"–û—Ç" if msg['type'] == 'incoming' else "AI –û—Ç–≤–µ—Ç"}: {msg['phone']} | IP: {msg['ip']}{ai_badge}</div>
                        <div class="msg-text">{msg['text']}</div>
                        <div class="msg-time">{msg['timestamp']}</div>
                    </div>
                    '''
            else:
                messages_html = '<p>–ü–æ–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ—Å—Ç–æ–≤–æ–µ SMS!</p>'
            
            # AI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            ai_count = len(ai_responses)
            
            html = f"""
            <html>
            <head>
                <title>ü§ñ SMS Gateway AI Monitor</title>
                <meta charset="utf-8">
                <meta name="viewport" content="width=device-width, initial-scale=1">
                <style>
                    body {{ font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }}
                    .container {{ max-width: 1000px; margin: 0 auto; background: white; padding: 20px; border-radius: 10px; }}
                    .status {{ background: #d4edda; color: #155724; padding: 15px; border-radius: 5px; margin-bottom: 20px; }}
                    .ai-status {{ background: #cce5ff; color: #004085; padding: 10px; border-radius: 5px; margin-bottom: 20px; }}
                    .message {{ border: 1px solid #ddd; margin: 10px 0; padding: 15px; border-radius: 8px; }}
                    .incoming {{ background: #e3f2fd; border-left: 4px solid #2196f3; }}
                    .outgoing {{ background: #e8f5e8; border-left: 4px solid #28a745; }}
                    .msg-header {{ font-weight: bold; margin-bottom: 5px; }}
                    .msg-text {{ margin: 8px 0; font-size: 16px; }}
                    .msg-time {{ font-size: 12px; color: #666; }}
                    h1 {{ color: #333; }}
                    .stats {{ display: flex; gap: 15px; margin: 20px 0; flex-wrap: wrap; }}
                    .stat {{ background: #f8f9fa; padding: 15px; border-radius: 5px; text-align: center; flex: 1; min-width: 120px; }}
                    .refresh {{ background: #007bff; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; }}
                    .ai-btn {{ background: #28a745; color: white; padding: 8px 15px; border: none; border-radius: 5px; cursor: pointer; margin-left: 10px; }}
                </style>
                <script>
                    // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                    setTimeout(() => location.reload(), 5000);
                    
                    function showAiHistory() {{
                        fetch('/ai-history')
                        .then(r => r.json())
                        .then(data => {{
                            let popup = window.open('', 'ai-history', 'width=800,height=600');
                            popup.document.write(`
                                <html>
                                <head><title>AI –ò—Å—Ç–æ—Ä–∏—è</title></head>
                                <body style="font-family: Arial; padding: 20px;">
                                    <h2>ü§ñ –ò—Å—Ç–æ—Ä–∏—è AI –æ–±—Ä–∞–±–æ—Ç–∫–∏</h2>
                                    <pre>${{JSON.stringify(data, null, 2)}}</pre>
                                </body>
                                </html>
                            `);
                        }});
                    }}
                </script>
            </head>
            <body>
                <div class="container">
                    <h1>ü§ñ SMS Gateway AI Monitor</h1>
                    
                    <div class="status">
                        ‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç | –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')} | –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}
                    </div>
                    
                    <div class="ai-status">
                        ü§ñ Groq AI –∞–∫—Ç–∏–≤–µ–Ω | –ú–æ–¥–µ–ª—å: llama3-8b-8192 | –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {ai_count}
                    </div>
                    
                    <div class="stats">
                        <div class="stat">
                            <div style="font-size: 24px; font-weight: bold;">{len([m for m in messages if m['type'] == 'incoming'])}</div>
                            <div>–í—Ö–æ–¥—è—â–∏—Ö SMS</div>
                        </div>
                        <div class="stat">
                            <div style="font-size: 24px; font-weight: bold;">{len([m for m in messages if m['type'] == 'outgoing'])}</div>
                            <div>AI –û—Ç–≤–µ—Ç–æ–≤</div>
                        </div>
                        <div class="stat">
                            <div style="font-size: 24px; font-weight: bold;">{len(set([m['ip'] for m in messages]))}</div>
                            <div>–£—Å—Ç—Ä–æ–π—Å—Ç–≤</div>
                        </div>
                        <div class="stat">
                            <div style="font-size: 24px; font-weight: bold;">{ai_count}</div>
                            <div>AI –ó–∞–ø—Ä–æ—Å–æ–≤</div>
                        </div>
                    </div>
                    
                    <h2>üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:</h2>
                    <div id="messages">
                        {messages_html}
                    </div>
                    
                    <div style="margin-top: 20px; text-align: center;">
                        <button class="refresh" onclick="location.reload()">üîÑ –û–±–Ω–æ–≤–∏—Ç—å</button>
                        <button class="ai-btn" onclick="showAiHistory()">ü§ñ AI –ò—Å—Ç–æ—Ä–∏—è</button>
                        <a href="/test" style="margin-left: 10px;">üß™ –¢–µ—Å—Ç</a>
                    </div>
                </div>
            </body>
            </html>
            """.encode()
            self.wfile.write(html)

PORT = 8080
Handler = MyHandler

print("üöÄ –ó–∞–ø—É—Å–∫ SMS Gateway —Å Groq AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π")
print(f"üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:{PORT}")
print(f"üì± –î–ª—è Android: http://192.168.0.121:{PORT}/webhook")
print(f"ü§ñ AI API: Groq (llama3-8b-8192)")
print(f"üß™ –¢–µ—Å—Ç: http://192.168.0.121:{PORT}/test")

with socketserver.TCPServer(("", PORT), Handler) as httpd:
    print(f"‚úÖ –°–µ—Ä–≤–µ—Ä —Å AI —Å–ª—É—à–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    httpd.serve_forever()
